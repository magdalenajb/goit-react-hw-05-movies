{"version":3,"file":"static/js/186.2cdd72b4.chunk.js","mappings":"yOAgDA,UA3CgB,WACd,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAY,mCAAG,2FACnBF,GAAa,GADM,mBAGOG,EAAAA,EAAAA,IAAgBT,GAHvB,OAGXU,EAHW,OAIjBN,EAAUM,GAJO,gDAMjBC,QAAQC,IAAR,MANiB,yBAQjBN,GAAa,GARI,4EAAH,qDAWlBE,GACD,GAAE,CAACR,IAECG,EAIL,OACE,gCACGE,IAAa,SAAC,IAAD,IACbF,EAAOU,OAAS,GACf,wBACGV,EAAOW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,0BAAa,YACH,uBAAID,KACZ,uBAAIC,MAFGF,EADC,OAQd,yBAAK,gDAIZ,C,mMC5CKG,EAAU,mCACVC,EAAW,gCAEXC,EAAiB,mCAAG,+FAClBC,EADkB,UACDF,EADC,gCAEDG,EAAAA,EAAAA,IAAUD,EAAa,CAC5CE,OAAQ,CACNC,QAASN,EACTO,SAAU,WALU,uBAEhBC,EAFgB,EAEhBA,KAFgB,kBAQjBA,EAAKC,SARY,2CAAH,qDAYjBC,EAAe,mCAAG,WAAMC,GAAN,kFAChBC,EADgB,UACDX,EADC,0BAECG,EAAAA,EAAAA,IAAUQ,EAAW,CAC1CP,OAAQ,CACNC,QAASN,EACTa,MAAOF,EACPG,eAAe,EACfP,SAAU,QACVQ,KAAM,KARY,uBAEdP,EAFc,EAEdA,KAFc,kBAWfA,EAAKC,SAXU,2CAAH,sDAefO,EAAe,mCAAG,WAAMlC,GAAN,kFAChBmC,EADgB,UACAhB,EADA,iBACiBnB,EADjB,cAECsB,EAAAA,EAAAA,IAAUa,EAAY,CAC3CZ,OAAQ,CACNC,QAASN,EACTO,SAAU,WALQ,uBAEdC,EAFc,EAEdA,KAFc,kBASfA,GATe,2CAAH,sDAafU,EAAe,mCAAG,WAAMpC,GAAN,kFAChBqC,EADgB,UACAlB,EADA,iBACiBnB,EADjB,sBAECsB,EAAAA,EAAAA,IAAUe,EAAY,CAC3Cd,OAAQ,CACNC,QAASN,EACTO,SAAU,WALQ,uBAEdC,EAFc,EAEdA,KAFc,kBAQfA,EAAKY,MARU,2CAAH,sDAYf7B,EAAe,mCAAG,WAAMT,GAAN,kFAChBuC,EADgB,UACApB,EADA,iBACiBnB,EADjB,sBAECsB,EAAAA,EAAAA,IAAUiB,EAAY,CAC3ChB,OAAQ,CACNC,QAASN,EACTO,SAAU,QACVQ,KAAM,KANY,uBAEdP,EAFc,EAEdA,KAFc,kBAUfA,EAAKC,SAVU,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/getMoviesApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/getMoviesApi';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [review, setReview] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      setIsLoading(true);\n      try {\n        const getReview = await getMovieReviews(movieId);\n        setReview(getReview);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  if (!review) {\n    return;\n  }\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {review.length > 0 ? (\n        <ul>\n          {review.map(({ id, author, content }) => (\n            <li key={id}>\n              Author: <b>{author}</b>\n              <p>{content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <div>We don't have any reviews for this movie.</div>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = '109c81fd83da243f6eda059647fc5d69';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst getTrendingMovies = async () => {\n  const trendingUrl = `${BASE_URL}trending/movie/day?`;\n  const { data } = await axios.get(trendingUrl, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data.results;\n};\n\n\nconst getSearchMovies = async search => {\n  const searchUrl = `${BASE_URL}search/movie?`;\n  const { data } = await axios.get(searchUrl, {\n    params: {\n      api_key: API_KEY,\n      query: search,\n      include_adult: false,\n      language: 'en-US',\n      page: 1,\n    },\n  });\n  return data.results;\n};\n\n\nconst getMovieDetails = async movieId => {\n  const detailsUrl = `${BASE_URL}movie/${movieId}?`;\n  const { data } = await axios.get(detailsUrl, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n\n  return data;\n};\n\n\nconst getMovieCredits = async movieId => {\n  const creditsUrl = `${BASE_URL}movie/${movieId}/credits?`;\n  const { data } = await axios.get(creditsUrl, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n  return data.cast;\n};\n\n\nconst getMovieReviews = async movieId => {\n  const reviewsUrl = `${BASE_URL}movie/${movieId}/reviews?`;\n  const { data } = await axios.get(reviewsUrl, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n      page: 1,\n    },\n  });\n\n  return data.results;\n};\n\nexport {\n  getTrendingMovies,\n  getSearchMovies,\n  getMovieDetails,\n  getMovieCredits,\n  getMovieReviews,\n};\n"],"names":["movieId","useParams","useState","review","setReview","isLoading","setIsLoading","useEffect","fetchReviews","getMovieReviews","getReview","console","log","length","map","id","author","content","API_KEY","BASE_URL","getTrendingMovies","trendingUrl","axios","params","api_key","language","data","results","getSearchMovies","search","searchUrl","query","include_adult","page","getMovieDetails","detailsUrl","getMovieCredits","creditsUrl","cast","reviewsUrl"],"sourceRoot":""}